// Script pour v√©rifier et migrer le sch√©ma Supabase
// Ex√©cuter avec: node scripts/check-supabase-schema.js

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configuration Supabase
const supabaseUrl = 'https://fhewhxjprkksjriohxpv.supabase.co'
const supabaseAnonKey = 'sb_publishable_ETUd5-_NuEu06GVBOOoakw_9SUgaD2G'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Liste des tables requises pour le sch√©ma complet
const REQUIRED_TABLES = [
  'profiles',
  'vendors', 
  'products',
  'orders',
  'order_items',
  'reviews',
  'cart_items',
  'wishlist_items',
  'inventory',
  'inventory_movements',
  'commissions',
  'chat_agents',
  'chat_conversations', 
  'chat_messages',
  'categories',
  'user_interactions'
]

// Colonnes requises pour chaque table
const REQUIRED_COLUMNS = {
  profiles: [
    'id', 'email', 'first_name', 'last_name', 'role', 'avatar_url', 
    'phone', 'address', 'preferences', 'created_at', 'updated_at'
  ],
  products: [
    'id', 'vendor_id', 'name', 'description', 'price', 'category', 
    'subcategory', 'sku', 'images', 'specifications', 'tags', 
    'status', 'featured', 'rating', 'review_count', 'created_at', 'updated_at'
  ],
  orders: [
    'id', 'customer_id', 'status', 'total_amount', 'tax_amount', 
    'shipping_amount', 'discount_amount', 'payment_status', 'payment_method',
    'shipping_address', 'billing_address', 'tracking_number', 'notes', 
    'metadata', 'created_at', 'updated_at'
  ]
}

async function checkTableExists(tableName) {
  try {
    const { error } = await supabase.from(tableName).select('*').limit(0)
    return !error
  } catch (err) {
    return false
  }
}

async function getTableColumns(tableName) {
  try {
    // Utiliser une requ√™te pour obtenir les colonnes de la table
    const { data, error } = await supabase
      .rpc('get_table_columns', { table_name: tableName })
    
    if (error) {
      console.log(`‚ö†Ô∏è  Impossible de r√©cup√©rer les colonnes de ${tableName}`)
      return []
    }
    
    return data || []
  } catch (err) {
    // Fallback: tenter une requ√™te vide pour d√©duire la structure
    try {
      const { data, error } = await supabase.from(tableName).select('*').limit(0)
      if (error) return []
      return Object.keys(data?.[0] || {})
    } catch {
      return []
    }
  }
}

async function checkSchema() {
  console.log('üîç V√©rification du sch√©ma Supabase...\n')
  
  const missingTables = []
  const existingTables = []
  const incompleteColumns = {}

  // V√©rifier chaque table requise
  for (const table of REQUIRED_TABLES) {
    const exists = await checkTableExists(table)
    
    if (exists) {
      console.log(`‚úÖ Table ${table} existe`)
      existingTables.push(table)
      
      // V√©rifier les colonnes pour les tables critiques
      if (REQUIRED_COLUMNS[table]) {
        const columns = await getTableColumns(table)
        const missingCols = REQUIRED_COLUMNS[table].filter(col => 
          !columns.includes(col)
        )
        
        if (missingCols.length > 0) {
          console.log(`‚ö†Ô∏è  Table ${table} - colonnes manquantes: ${missingCols.join(', ')}`)
          incompleteColumns[table] = missingCols
        }
      }
    } else {
      console.log(`‚ùå Table ${table} manquante`)
      missingTables.push(table)
    }
  }

  return {
    missingTables,
    existingTables,
    incompleteColumns,
    totalTables: REQUIRED_TABLES.length,
    existingTablesCount: existingTables.length
  }
}

async function suggestMigrationSteps(schemaCheck) {
  console.log('\nüìã RAPPORT DE MIGRATION\n')
  console.log('=' * 50)
  
  console.log(`\nüìä STATUT ACTUEL:`)
  console.log(`   Tables existantes: ${schemaCheck.existingTablesCount}/${schemaCheck.totalTables}`)
  console.log(`   Progression: ${Math.round((schemaCheck.existingTablesCount / schemaCheck.totalTables) * 100)}%`)

  if (schemaCheck.missingTables.length > 0) {
    console.log(`\n‚ùå TABLES MANQUANTES (${schemaCheck.missingTables.length}):`)
    schemaCheck.missingTables.forEach(table => {
      console.log(`   - ${table}`)
    })
  }

  if (Object.keys(schemaCheck.incompleteColumns).length > 0) {
    console.log(`\n‚ö†Ô∏è  COLONNES MANQUANTES:`)
    for (const [table, columns] of Object.entries(schemaCheck.incompleteColumns)) {
      console.log(`   ${table}: ${columns.join(', ')}`)
    }
  }

  console.log(`\nüîß √âTAPES DE MIGRATION RECOMMAND√âES:`)
  
  if (schemaCheck.missingTables.length > 0 || Object.keys(schemaCheck.incompleteColumns).length > 0) {
    console.log(`\n1. Ex√©cuter le script de migration complet:`)
    console.log(`   üìÅ Fichier: supabase/migration-complete-schema.sql`)
    console.log(`   üéØ Action: Copier et ex√©cuter dans l'√©diteur SQL de Supabase`)
    
    console.log(`\n2. V√©rifier les fonctions personnalis√©es:`)
    console.log(`   üìÅ Fichier: supabase/database-functions.sql`)
    console.log(`   üéØ Action: Ex√©cuter les fonctions avanc√©es`)
    
    console.log(`\n3. Configurer Row Level Security:`)
    console.log(`   üîí Les politiques RLS seront appliqu√©es automatiquement`)
    
    console.log(`\n4. Tester la migration:`)
    console.log(`   üß™ Commande: node scripts/test-supabase-integration.js`)
  } else {
    console.log(`   ‚úÖ Sch√©ma complet - Aucune migration n√©cessaire!`)
  }

  return schemaCheck
}

async function createMigrationGuide(schemaCheck) {
  const guideContent = `
# Guide de Migration Supabase - E-commerce Platform

## Statut Actuel
- Tables existantes: ${schemaCheck.existingTablesCount}/${schemaCheck.totalTables}
- Progression: ${Math.round((schemaCheck.existingTablesCount / schemaCheck.totalTables) * 100)}%

## Tables Manquantes
${schemaCheck.missingTables.map(table => `- ${table}`).join('\n')}

## Colonnes Manquantes
${Object.entries(schemaCheck.incompleteColumns).map(([table, columns]) => 
  `- ${table}: ${columns.join(', ')}`
).join('\n')}

## Instructions de Migration

### 1. Ouvrir Supabase Dashboard
1. Aller sur [https://supabase.com/dashboard](https://supabase.com/dashboard)
2. S√©lectionner votre projet
3. Aller dans "SQL Editor"

### 2. Ex√©cuter le Script de Migration
1. Copier le contenu de \`supabase/migration-complete-schema.sql\`
2. Coller dans l'√©diteur SQL
3. Cliquer sur "Run"

### 3. Ex√©cuter les Fonctions Avanc√©es
1. Copier le contenu de \`supabase/database-functions.sql\`
2. Coller dans l'√©diteur SQL
3. Cliquer sur "Run"

### 4. V√©rifier la Migration
Ex√©cuter le script de test:
\`\`\`bash
node scripts/test-supabase-integration.js
\`\`\`

### 5. Configurer les Variables d'Environnement
V√©rifier que vos fichiers .env.local contiennent:
\`\`\`
NEXT_PUBLIC_SUPABASE_URL=https://fhewhxjprkksjriohxpv.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=sb_publishable_ETUd5-_NuEu06GVBOOoakw_9SUgaD2G
\`\`\`

## Prochaines √âtapes Apr√®s Migration
1. Tester l'authentification
2. Tester la cr√©ation de produits
3. Tester le panier et les commandes
4. Configurer les paiements (Stripe/PayPal)
5. Optimiser les performances

---
G√©n√©r√© automatiquement le ${new Date().toLocaleDateString('fr-FR')}
`

  const guidePath = path.join(process.cwd(), 'MIGRATION_GUIDE.md')
  fs.writeFileSync(guidePath, guideContent)
  console.log(`\nüìù Guide de migration cr√©√©: ${guidePath}`)
}

async function main() {
  console.log('üöÄ V√âRIFICATION ET MIGRATION DU SCH√âMA SUPABASE')
  console.log('=' * 60)
  
  try {
    const schemaCheck = await checkSchema()
    await suggestMigrationSteps(schemaCheck)
    await createMigrationGuide(schemaCheck)
    
    console.log('\nüéØ ACTIONS RECOMMAND√âES:')
    
    if (schemaCheck.missingTables.length > 0) {
      console.log('\nüî¥ MIGRATION REQUISE:')
      console.log('   1. Ouvrir Supabase Dashboard > SQL Editor')
      console.log('   2. Ex√©cuter: supabase/migration-complete-schema.sql')
      console.log('   3. Ex√©cuter: supabase/database-functions.sql')
      console.log('   4. Relancer ce script pour v√©rifier')
    } else {
      console.log('\nüü¢ SCH√âMA PR√äT:')
      console.log('   1. Lancer les applications: npm run dev')
      console.log('   2. Tester les fonctionnalit√©s')
      console.log('   3. Configurer les paiements')
    }
    
    console.log('\n‚ú® V√©rification termin√©e!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message)
    process.exit(1)
  }
}

// Ex√©cuter la v√©rification
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { checkSchema, suggestMigrationSteps }